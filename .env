# .env Template for CapConduit CFAP

# -- Flask Core Settings --
# Set the environment for Flask. Use 'production' in production.
# Options: development, testing, production
FLASK_ENV=development
# FLASK_ENV=production

# Set FLASK_APP for the 'flask' command. Should point to the app factory.
# Typically defined in .flaskenv, but can be here too.
# FLASK_APP="app:create_app()"

# Generate a strong, unique secret key using: python -c 'import secrets; print(secrets.token_hex(32))'
# Replace the placeholder below. DO NOT COMMIT YOUR ACTUAL SECRET KEY.
SECRET_KEY=replace_this_with_a_strong_random_secret_key_32_hex_chars_long

# Optional: Explicitly enable Flask debug mode (redundant if FLASK_ENV=development)
# FLASK_DEBUG=1

# -- Database Configuration (PostgreSQL) --
# Connection URI format: postgresql://user:password@host:port/database
# Ensure the user/password are URL-encoded if they contain special characters (e.g., @, :, /)
# Example with encoded password 'Sudh@3299' -> 'Sudh%403299'
DATABASE_URI=postgresql://call_platform_user:Sudh%403299@localhost:5432/call_platform_db

# Optional: Separate URI for testing (used by TestingConfig if TEST_DATABASE_URI is set)
# Ensure this database exists and the user has permissions.
TEST_DATABASE_URI=postgresql://call_platform_user:Sudh%403299@localhost:5432/call_platform_test_db

# Optional: Enable SQL query logging in development (set to true/1/t to enable)
# SQLALCHEMY_ECHO=False

# -- Internal API Security --
# A shared secret token used to authenticate requests from Asterisk (AGI scripts)
# Generate a secure random token. DO NOT COMMIT YOUR ACTUAL TOKEN.
INTERNAL_API_TOKEN=replace_this_with_a_secure_random_internal_api_token

# -- Application Specific Settings --
# Example: Set logging level for production (DEBUG, INFO, WARNING, ERROR, CRITICAL)
# LOG_LEVEL=INFO

# Example: Email server settings if using Flask-Mail
# MAIL_SERVER=smtp.example.com
# MAIL_PORT=587
# MAIL_USE_TLS=True
# MAIL_USERNAME=your_email@example.com
# MAIL_PASSWORD=your_email_password